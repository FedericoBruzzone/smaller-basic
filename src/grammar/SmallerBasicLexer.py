# Generated from src/grammar/SmallerBasic.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,294,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,1,0,1,0,1,0,3,0,87,8,0,1,1,1,1,5,1,91,8,1,10,1,
        12,1,94,9,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,107,
        8,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,
        1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,
        1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,
        1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,
        1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,
        1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,5,31,211,8,31,10,31,
        12,31,214,9,31,1,32,1,32,5,32,218,8,32,10,32,12,32,221,9,32,1,32,
        3,32,224,8,32,1,33,1,33,5,33,228,8,33,10,33,12,33,231,9,33,1,33,
        3,33,234,8,33,1,33,1,33,4,33,238,8,33,11,33,12,33,239,1,33,3,33,
        243,8,33,1,34,1,34,3,34,247,8,34,1,34,4,34,250,8,34,11,34,12,34,
        251,1,35,1,35,1,36,1,36,1,37,4,37,259,8,37,11,37,12,37,260,1,37,
        1,37,1,38,1,38,1,38,1,38,5,38,269,8,38,10,38,12,38,272,9,38,1,38,
        1,38,1,38,1,38,1,38,1,39,3,39,280,8,39,1,39,1,39,1,40,1,40,1,40,
        1,40,5,40,288,8,40,10,40,12,40,291,9,40,1,40,1,40,1,270,0,41,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,0,67,0,69,0,71,0,73,
        0,75,33,77,34,79,35,81,36,1,0,8,3,0,0,31,34,34,127,127,1,0,49,57,
        2,0,69,69,101,101,2,0,43,43,45,45,1,0,48,57,2,0,65,90,97,122,3,0,
        9,10,13,13,32,32,2,0,10,10,13,13,308,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,75,1,
        0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,1,86,1,0,0,0,3,88,1,
        0,0,0,5,106,1,0,0,0,7,108,1,0,0,0,9,110,1,0,0,0,11,112,1,0,0,0,13,
        114,1,0,0,0,15,116,1,0,0,0,17,118,1,0,0,0,19,120,1,0,0,0,21,122,
        1,0,0,0,23,124,1,0,0,0,25,126,1,0,0,0,27,128,1,0,0,0,29,130,1,0,
        0,0,31,132,1,0,0,0,33,135,1,0,0,0,35,138,1,0,0,0,37,141,1,0,0,0,
        39,145,1,0,0,0,41,148,1,0,0,0,43,151,1,0,0,0,45,156,1,0,0,0,47,161,
        1,0,0,0,49,167,1,0,0,0,51,173,1,0,0,0,53,182,1,0,0,0,55,186,1,0,
        0,0,57,189,1,0,0,0,59,194,1,0,0,0,61,201,1,0,0,0,63,206,1,0,0,0,
        65,215,1,0,0,0,67,233,1,0,0,0,69,244,1,0,0,0,71,253,1,0,0,0,73,255,
        1,0,0,0,75,258,1,0,0,0,77,264,1,0,0,0,79,279,1,0,0,0,81,283,1,0,
        0,0,83,87,3,65,32,0,84,87,3,67,33,0,85,87,5,48,0,0,86,83,1,0,0,0,
        86,84,1,0,0,0,86,85,1,0,0,0,87,2,1,0,0,0,88,92,5,34,0,0,89,91,8,
        0,0,0,90,89,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,
        95,1,0,0,0,94,92,1,0,0,0,95,96,5,34,0,0,96,4,1,0,0,0,97,98,5,116,
        0,0,98,99,5,114,0,0,99,100,5,117,0,0,100,107,5,101,0,0,101,102,5,
        102,0,0,102,103,5,97,0,0,103,104,5,108,0,0,104,105,5,115,0,0,105,
        107,5,101,0,0,106,97,1,0,0,0,106,101,1,0,0,0,107,6,1,0,0,0,108,109,
        5,40,0,0,109,8,1,0,0,0,110,111,5,41,0,0,111,10,1,0,0,0,112,113,5,
        91,0,0,113,12,1,0,0,0,114,115,5,93,0,0,115,14,1,0,0,0,116,117,5,
        58,0,0,117,16,1,0,0,0,118,119,5,43,0,0,119,18,1,0,0,0,120,121,5,
        45,0,0,121,20,1,0,0,0,122,123,5,42,0,0,123,22,1,0,0,0,124,125,5,
        47,0,0,125,24,1,0,0,0,126,127,5,62,0,0,127,26,1,0,0,0,128,129,5,
        60,0,0,129,28,1,0,0,0,130,131,5,61,0,0,131,30,1,0,0,0,132,133,5,
        62,0,0,133,134,5,61,0,0,134,32,1,0,0,0,135,136,5,60,0,0,136,137,
        5,61,0,0,137,34,1,0,0,0,138,139,5,60,0,0,139,140,5,62,0,0,140,36,
        1,0,0,0,141,142,5,65,0,0,142,143,5,110,0,0,143,144,5,100,0,0,144,
        38,1,0,0,0,145,146,5,79,0,0,146,147,5,114,0,0,147,40,1,0,0,0,148,
        149,5,73,0,0,149,150,5,102,0,0,150,42,1,0,0,0,151,152,5,84,0,0,152,
        153,5,104,0,0,153,154,5,101,0,0,154,155,5,110,0,0,155,44,1,0,0,0,
        156,157,5,69,0,0,157,158,5,108,0,0,158,159,5,115,0,0,159,160,5,101,
        0,0,160,46,1,0,0,0,161,162,5,69,0,0,162,163,5,110,0,0,163,164,5,
        100,0,0,164,165,5,73,0,0,165,166,5,102,0,0,166,48,1,0,0,0,167,168,
        5,87,0,0,168,169,5,104,0,0,169,170,5,105,0,0,170,171,5,108,0,0,171,
        172,5,101,0,0,172,50,1,0,0,0,173,174,5,69,0,0,174,175,5,110,0,0,
        175,176,5,100,0,0,176,177,5,87,0,0,177,178,5,104,0,0,178,179,5,105,
        0,0,179,180,5,108,0,0,180,181,5,101,0,0,181,52,1,0,0,0,182,183,5,
        70,0,0,183,184,5,111,0,0,184,185,5,114,0,0,185,54,1,0,0,0,186,187,
        5,84,0,0,187,188,5,111,0,0,188,56,1,0,0,0,189,190,5,83,0,0,190,191,
        5,116,0,0,191,192,5,101,0,0,192,193,5,112,0,0,193,58,1,0,0,0,194,
        195,5,69,0,0,195,196,5,110,0,0,196,197,5,100,0,0,197,198,5,70,0,
        0,198,199,5,111,0,0,199,200,5,114,0,0,200,60,1,0,0,0,201,202,5,71,
        0,0,202,203,5,111,0,0,203,204,5,116,0,0,204,205,5,111,0,0,205,62,
        1,0,0,0,206,212,3,73,36,0,207,211,3,73,36,0,208,211,3,71,35,0,209,
        211,5,95,0,0,210,207,1,0,0,0,210,208,1,0,0,0,210,209,1,0,0,0,211,
        214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,64,1,0,0,0,214,212,
        1,0,0,0,215,219,7,1,0,0,216,218,3,71,35,0,217,216,1,0,0,0,218,221,
        1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,223,1,0,0,0,221,219,
        1,0,0,0,222,224,3,69,34,0,223,222,1,0,0,0,223,224,1,0,0,0,224,66,
        1,0,0,0,225,229,7,1,0,0,226,228,3,71,35,0,227,226,1,0,0,0,228,231,
        1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,234,1,0,0,0,231,229,
        1,0,0,0,232,234,5,48,0,0,233,225,1,0,0,0,233,232,1,0,0,0,233,234,
        1,0,0,0,234,235,1,0,0,0,235,237,5,46,0,0,236,238,3,71,35,0,237,236,
        1,0,0,0,238,239,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,242,
        1,0,0,0,241,243,3,69,34,0,242,241,1,0,0,0,242,243,1,0,0,0,243,68,
        1,0,0,0,244,246,7,2,0,0,245,247,7,3,0,0,246,245,1,0,0,0,246,247,
        1,0,0,0,247,249,1,0,0,0,248,250,3,71,35,0,249,248,1,0,0,0,250,251,
        1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,70,1,0,0,0,253,254,7,
        4,0,0,254,72,1,0,0,0,255,256,7,5,0,0,256,74,1,0,0,0,257,259,7,6,
        0,0,258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,0,0,0,260,261,1,0,
        0,0,261,262,1,0,0,0,262,263,6,37,0,0,263,76,1,0,0,0,264,265,5,47,
        0,0,265,266,5,42,0,0,266,270,1,0,0,0,267,269,9,0,0,0,268,267,1,0,
        0,0,269,272,1,0,0,0,270,271,1,0,0,0,270,268,1,0,0,0,271,273,1,0,
        0,0,272,270,1,0,0,0,273,274,5,42,0,0,274,275,5,47,0,0,275,276,1,
        0,0,0,276,277,6,38,0,0,277,78,1,0,0,0,278,280,5,13,0,0,279,278,1,
        0,0,0,279,280,1,0,0,0,280,281,1,0,0,0,281,282,5,10,0,0,282,80,1,
        0,0,0,283,284,5,47,0,0,284,285,5,47,0,0,285,289,1,0,0,0,286,288,
        8,7,0,0,287,286,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,
        1,0,0,0,290,292,1,0,0,0,291,289,1,0,0,0,292,293,6,40,0,0,293,82,
        1,0,0,0,18,0,86,92,106,210,212,219,223,229,233,239,242,246,251,260,
        270,279,289,1,6,0,0
    ]

class SmallerBasicLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUMBER_LITERAL = 1
    STRING_LITERAL = 2
    BOOLEAN_LITERAL = 3
    LROUND = 4
    RROUND = 5
    LSQUARE = 6
    RSQUARE = 7
    COLON = 8
    PLUS = 9
    MINUS = 10
    MUL = 11
    DIV = 12
    GT = 13
    LT = 14
    EQ = 15
    GTEQ = 16
    LTEQ = 17
    NEQ = 18
    AND = 19
    OR = 20
    IF = 21
    THEN = 22
    ELSE = 23
    ENDIF = 24
    WHILE = 25
    ENDWHILE = 26
    FOR = 27
    TO = 28
    STEP = 29
    ENDFOR = 30
    GOTO = 31
    ID = 32
    WS = 33
    COMMENT = 34
    NEWLINE = 35
    LINE_COMMENT = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'['", "']'", "':'", "'+'", "'-'", "'*'", "'/'", 
            "'>'", "'<'", "'='", "'>='", "'<='", "'<>'", "'And'", "'Or'", 
            "'If'", "'Then'", "'Else'", "'EndIf'", "'While'", "'EndWhile'", 
            "'For'", "'To'", "'Step'", "'EndFor'", "'Goto'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", "LROUND", 
            "RROUND", "LSQUARE", "RSQUARE", "COLON", "PLUS", "MINUS", "MUL", 
            "DIV", "GT", "LT", "EQ", "GTEQ", "LTEQ", "NEQ", "AND", "OR", 
            "IF", "THEN", "ELSE", "ENDIF", "WHILE", "ENDWHILE", "FOR", "TO", 
            "STEP", "ENDFOR", "GOTO", "ID", "WS", "COMMENT", "NEWLINE", 
            "LINE_COMMENT" ]

    ruleNames = [ "NUMBER_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", 
                  "LROUND", "RROUND", "LSQUARE", "RSQUARE", "COLON", "PLUS", 
                  "MINUS", "MUL", "DIV", "GT", "LT", "EQ", "GTEQ", "LTEQ", 
                  "NEQ", "AND", "OR", "IF", "THEN", "ELSE", "ENDIF", "WHILE", 
                  "ENDWHILE", "FOR", "TO", "STEP", "ENDFOR", "GOTO", "ID", 
                  "INT", "FLOAT", "EXPONENT", "NUM", "CHAR", "WS", "COMMENT", 
                  "NEWLINE", "LINE_COMMENT" ]

    grammarFileName = "SmallerBasic.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


