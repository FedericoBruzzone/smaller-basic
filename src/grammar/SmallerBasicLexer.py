# Generated from src/grammar/SmallerBasic.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,279,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,
        3,0,81,8,0,1,1,1,1,5,1,85,8,1,10,1,12,1,88,9,1,1,1,1,1,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,101,8,2,1,3,1,3,1,4,1,4,1,5,1,5,1,
        6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,
        1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
        1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,
        1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,1,27,1,27,1,27,1,27,5,27,194,8,27,10,27,12,27,197,9,27,1,28,
        1,28,5,28,201,8,28,10,28,12,28,204,9,28,1,28,3,28,207,8,28,1,29,
        1,29,5,29,211,8,29,10,29,12,29,214,9,29,1,29,3,29,217,8,29,1,29,
        1,29,4,29,221,8,29,11,29,12,29,222,1,29,3,29,226,8,29,1,30,1,30,
        1,31,1,31,3,31,232,8,31,1,31,4,31,235,8,31,11,31,12,31,236,1,32,
        1,32,1,33,1,33,1,34,4,34,244,8,34,11,34,12,34,245,1,34,1,34,1,35,
        1,35,1,35,1,35,5,35,254,8,35,10,35,12,35,257,9,35,1,35,1,35,1,35,
        1,35,1,35,1,36,3,36,265,8,36,1,36,1,36,1,37,1,37,1,37,1,37,5,37,
        273,8,37,10,37,12,37,276,9,37,1,37,1,37,1,255,0,38,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
        27,55,28,57,0,59,0,61,0,63,0,65,0,67,0,69,29,71,30,73,31,75,32,1,
        0,8,3,0,0,31,34,34,127,127,1,0,49,57,2,0,43,43,45,45,2,0,69,69,101,
        101,1,0,48,57,2,0,65,90,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,
        13,292,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
        0,0,73,1,0,0,0,0,75,1,0,0,0,1,80,1,0,0,0,3,82,1,0,0,0,5,100,1,0,
        0,0,7,102,1,0,0,0,9,104,1,0,0,0,11,106,1,0,0,0,13,108,1,0,0,0,15,
        110,1,0,0,0,17,112,1,0,0,0,19,114,1,0,0,0,21,116,1,0,0,0,23,118,
        1,0,0,0,25,120,1,0,0,0,27,123,1,0,0,0,29,126,1,0,0,0,31,129,1,0,
        0,0,33,133,1,0,0,0,35,136,1,0,0,0,37,139,1,0,0,0,39,144,1,0,0,0,
        41,149,1,0,0,0,43,155,1,0,0,0,45,161,1,0,0,0,47,170,1,0,0,0,49,174,
        1,0,0,0,51,177,1,0,0,0,53,182,1,0,0,0,55,189,1,0,0,0,57,198,1,0,
        0,0,59,216,1,0,0,0,61,227,1,0,0,0,63,229,1,0,0,0,65,238,1,0,0,0,
        67,240,1,0,0,0,69,243,1,0,0,0,71,249,1,0,0,0,73,264,1,0,0,0,75,268,
        1,0,0,0,77,81,3,57,28,0,78,81,3,59,29,0,79,81,5,48,0,0,80,77,1,0,
        0,0,80,78,1,0,0,0,80,79,1,0,0,0,81,2,1,0,0,0,82,86,5,34,0,0,83,85,
        8,0,0,0,84,83,1,0,0,0,85,88,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,
        87,89,1,0,0,0,88,86,1,0,0,0,89,90,5,34,0,0,90,4,1,0,0,0,91,92,5,
        116,0,0,92,93,5,114,0,0,93,94,5,117,0,0,94,101,5,101,0,0,95,96,5,
        102,0,0,96,97,5,97,0,0,97,98,5,108,0,0,98,99,5,115,0,0,99,101,5,
        101,0,0,100,91,1,0,0,0,100,95,1,0,0,0,101,6,1,0,0,0,102,103,5,40,
        0,0,103,8,1,0,0,0,104,105,5,41,0,0,105,10,1,0,0,0,106,107,5,43,0,
        0,107,12,1,0,0,0,108,109,5,45,0,0,109,14,1,0,0,0,110,111,5,42,0,
        0,111,16,1,0,0,0,112,113,5,47,0,0,113,18,1,0,0,0,114,115,5,62,0,
        0,115,20,1,0,0,0,116,117,5,60,0,0,117,22,1,0,0,0,118,119,5,61,0,
        0,119,24,1,0,0,0,120,121,5,62,0,0,121,122,5,61,0,0,122,26,1,0,0,
        0,123,124,5,60,0,0,124,125,5,61,0,0,125,28,1,0,0,0,126,127,5,60,
        0,0,127,128,5,62,0,0,128,30,1,0,0,0,129,130,5,65,0,0,130,131,5,110,
        0,0,131,132,5,100,0,0,132,32,1,0,0,0,133,134,5,79,0,0,134,135,5,
        114,0,0,135,34,1,0,0,0,136,137,5,73,0,0,137,138,5,102,0,0,138,36,
        1,0,0,0,139,140,5,84,0,0,140,141,5,104,0,0,141,142,5,101,0,0,142,
        143,5,110,0,0,143,38,1,0,0,0,144,145,5,69,0,0,145,146,5,108,0,0,
        146,147,5,115,0,0,147,148,5,101,0,0,148,40,1,0,0,0,149,150,5,69,
        0,0,150,151,5,110,0,0,151,152,5,100,0,0,152,153,5,73,0,0,153,154,
        5,102,0,0,154,42,1,0,0,0,155,156,5,87,0,0,156,157,5,104,0,0,157,
        158,5,105,0,0,158,159,5,108,0,0,159,160,5,101,0,0,160,44,1,0,0,0,
        161,162,5,69,0,0,162,163,5,110,0,0,163,164,5,100,0,0,164,165,5,87,
        0,0,165,166,5,104,0,0,166,167,5,105,0,0,167,168,5,108,0,0,168,169,
        5,101,0,0,169,46,1,0,0,0,170,171,5,70,0,0,171,172,5,111,0,0,172,
        173,5,114,0,0,173,48,1,0,0,0,174,175,5,84,0,0,175,176,5,111,0,0,
        176,50,1,0,0,0,177,178,5,83,0,0,178,179,5,116,0,0,179,180,5,101,
        0,0,180,181,5,112,0,0,181,52,1,0,0,0,182,183,5,69,0,0,183,184,5,
        110,0,0,184,185,5,100,0,0,185,186,5,70,0,0,186,187,5,111,0,0,187,
        188,5,114,0,0,188,54,1,0,0,0,189,195,3,67,33,0,190,194,3,67,33,0,
        191,194,3,65,32,0,192,194,5,95,0,0,193,190,1,0,0,0,193,191,1,0,0,
        0,193,192,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,
        0,196,56,1,0,0,0,197,195,1,0,0,0,198,202,7,1,0,0,199,201,3,65,32,
        0,200,199,1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,
        0,203,206,1,0,0,0,204,202,1,0,0,0,205,207,3,63,31,0,206,205,1,0,
        0,0,206,207,1,0,0,0,207,58,1,0,0,0,208,212,7,1,0,0,209,211,3,65,
        32,0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,
        0,0,213,217,1,0,0,0,214,212,1,0,0,0,215,217,5,48,0,0,216,208,1,0,
        0,0,216,215,1,0,0,0,216,217,1,0,0,0,217,218,1,0,0,0,218,220,5,46,
        0,0,219,221,3,65,32,0,220,219,1,0,0,0,221,222,1,0,0,0,222,220,1,
        0,0,0,222,223,1,0,0,0,223,225,1,0,0,0,224,226,3,63,31,0,225,224,
        1,0,0,0,225,226,1,0,0,0,226,60,1,0,0,0,227,228,7,2,0,0,228,62,1,
        0,0,0,229,231,7,3,0,0,230,232,3,61,30,0,231,230,1,0,0,0,231,232,
        1,0,0,0,232,234,1,0,0,0,233,235,3,65,32,0,234,233,1,0,0,0,235,236,
        1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,64,1,0,0,0,238,239,7,
        4,0,0,239,66,1,0,0,0,240,241,7,5,0,0,241,68,1,0,0,0,242,244,7,6,
        0,0,243,242,1,0,0,0,244,245,1,0,0,0,245,243,1,0,0,0,245,246,1,0,
        0,0,246,247,1,0,0,0,247,248,6,34,0,0,248,70,1,0,0,0,249,250,5,47,
        0,0,250,251,5,42,0,0,251,255,1,0,0,0,252,254,9,0,0,0,253,252,1,0,
        0,0,254,257,1,0,0,0,255,256,1,0,0,0,255,253,1,0,0,0,256,258,1,0,
        0,0,257,255,1,0,0,0,258,259,5,42,0,0,259,260,5,47,0,0,260,261,1,
        0,0,0,261,262,6,35,0,0,262,72,1,0,0,0,263,265,5,13,0,0,264,263,1,
        0,0,0,264,265,1,0,0,0,265,266,1,0,0,0,266,267,5,10,0,0,267,74,1,
        0,0,0,268,269,5,47,0,0,269,270,5,47,0,0,270,274,1,0,0,0,271,273,
        8,7,0,0,272,271,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,
        1,0,0,0,275,277,1,0,0,0,276,274,1,0,0,0,277,278,6,37,0,0,278,76,
        1,0,0,0,18,0,80,86,100,193,195,202,206,212,216,222,225,231,236,245,
        255,264,274,1,6,0,0
    ]

class SmallerBasicLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUMBER_LITERAL = 1
    STRING_LITERAL = 2
    BOOLEAN_LITERAL = 3
    LPAREN = 4
    RPAREN = 5
    PLUS = 6
    MINUS = 7
    MUL = 8
    DIV = 9
    GT = 10
    LT = 11
    EQ = 12
    GTEQ = 13
    LTEQ = 14
    NEQ = 15
    AND = 16
    OR = 17
    IF = 18
    THEN = 19
    ELSE = 20
    ENDIF = 21
    WHILE = 22
    ENDWHILE = 23
    FOR = 24
    TO = 25
    STEP = 26
    ENDFOR = 27
    ID = 28
    WS = 29
    COMMENT = 30
    NEWLINE = 31
    LINE_COMMENT = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'", "'='", 
            "'>='", "'<='", "'<>'", "'And'", "'Or'", "'If'", "'Then'", "'Else'", 
            "'EndIf'", "'While'", "'EndWhile'", "'For'", "'To'", "'Step'", 
            "'EndFor'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", "LPAREN", 
            "RPAREN", "PLUS", "MINUS", "MUL", "DIV", "GT", "LT", "EQ", "GTEQ", 
            "LTEQ", "NEQ", "AND", "OR", "IF", "THEN", "ELSE", "ENDIF", "WHILE", 
            "ENDWHILE", "FOR", "TO", "STEP", "ENDFOR", "ID", "WS", "COMMENT", 
            "NEWLINE", "LINE_COMMENT" ]

    ruleNames = [ "NUMBER_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", 
                  "LPAREN", "RPAREN", "PLUS", "MINUS", "MUL", "DIV", "GT", 
                  "LT", "EQ", "GTEQ", "LTEQ", "NEQ", "AND", "OR", "IF", 
                  "THEN", "ELSE", "ENDIF", "WHILE", "ENDWHILE", "FOR", "TO", 
                  "STEP", "ENDFOR", "ID", "INT", "FLOAT", "SIGN", "EXPONENT", 
                  "NUM", "CHAR", "WS", "COMMENT", "NEWLINE", "LINE_COMMENT" ]

    grammarFileName = "SmallerBasic.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


