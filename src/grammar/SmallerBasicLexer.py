# Generated from src/grammar/SmallerBasic.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,41,310,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,1,0,1,0,5,0,92,8,
        0,10,0,12,0,95,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,
        1,108,8,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
        8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,
        1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,
        1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
        1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,
        1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,
        1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,5,34,
        227,8,34,10,34,12,34,230,9,34,1,35,1,35,1,35,5,35,235,8,35,10,35,
        12,35,238,9,35,3,35,240,8,35,1,36,1,36,5,36,244,8,36,10,36,12,36,
        247,9,36,1,36,3,36,250,8,36,1,36,3,36,253,8,36,1,36,4,36,256,8,36,
        11,36,12,36,257,1,36,3,36,261,8,36,1,37,1,37,3,37,265,8,37,1,37,
        4,37,268,8,37,11,37,12,37,269,1,38,1,38,1,39,1,39,1,40,4,40,277,
        8,40,11,40,12,40,278,1,40,1,40,1,41,3,41,284,8,41,1,41,1,41,1,42,
        1,42,5,42,290,8,42,10,42,12,42,293,9,42,1,42,1,42,1,43,1,43,1,43,
        1,43,5,43,301,8,43,10,43,12,43,304,9,43,1,43,1,43,1,43,1,43,1,43,
        1,302,0,44,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,0,77,0,79,0,81,38,83,39,85,40,87,41,1,0,
        8,3,0,0,31,34,34,127,127,1,0,49,57,2,0,69,69,101,101,2,0,43,43,45,
        45,1,0,48,57,2,0,65,90,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,
        13,325,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
        0,0,71,1,0,0,0,0,73,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
        0,0,87,1,0,0,0,1,89,1,0,0,0,3,107,1,0,0,0,5,109,1,0,0,0,7,111,1,
        0,0,0,9,113,1,0,0,0,11,115,1,0,0,0,13,117,1,0,0,0,15,119,1,0,0,0,
        17,121,1,0,0,0,19,123,1,0,0,0,21,125,1,0,0,0,23,127,1,0,0,0,25,129,
        1,0,0,0,27,131,1,0,0,0,29,133,1,0,0,0,31,135,1,0,0,0,33,137,1,0,
        0,0,35,140,1,0,0,0,37,143,1,0,0,0,39,146,1,0,0,0,41,150,1,0,0,0,
        43,153,1,0,0,0,45,156,1,0,0,0,47,161,1,0,0,0,49,166,1,0,0,0,51,172,
        1,0,0,0,53,178,1,0,0,0,55,187,1,0,0,0,57,191,1,0,0,0,59,194,1,0,
        0,0,61,199,1,0,0,0,63,206,1,0,0,0,65,211,1,0,0,0,67,215,1,0,0,0,
        69,222,1,0,0,0,71,239,1,0,0,0,73,249,1,0,0,0,75,262,1,0,0,0,77,271,
        1,0,0,0,79,273,1,0,0,0,81,276,1,0,0,0,83,283,1,0,0,0,85,287,1,0,
        0,0,87,296,1,0,0,0,89,93,5,34,0,0,90,92,8,0,0,0,91,90,1,0,0,0,92,
        95,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,96,1,0,0,0,95,93,1,0,0,
        0,96,97,5,34,0,0,97,2,1,0,0,0,98,99,5,116,0,0,99,100,5,114,0,0,100,
        101,5,117,0,0,101,108,5,101,0,0,102,103,5,102,0,0,103,104,5,97,0,
        0,104,105,5,108,0,0,105,106,5,115,0,0,106,108,5,101,0,0,107,98,1,
        0,0,0,107,102,1,0,0,0,108,4,1,0,0,0,109,110,5,40,0,0,110,6,1,0,0,
        0,111,112,5,41,0,0,112,8,1,0,0,0,113,114,5,91,0,0,114,10,1,0,0,0,
        115,116,5,93,0,0,116,12,1,0,0,0,117,118,5,46,0,0,118,14,1,0,0,0,
        119,120,5,58,0,0,120,16,1,0,0,0,121,122,5,44,0,0,122,18,1,0,0,0,
        123,124,5,43,0,0,124,20,1,0,0,0,125,126,5,45,0,0,126,22,1,0,0,0,
        127,128,5,42,0,0,128,24,1,0,0,0,129,130,5,47,0,0,130,26,1,0,0,0,
        131,132,5,62,0,0,132,28,1,0,0,0,133,134,5,60,0,0,134,30,1,0,0,0,
        135,136,5,61,0,0,136,32,1,0,0,0,137,138,5,62,0,0,138,139,5,61,0,
        0,139,34,1,0,0,0,140,141,5,60,0,0,141,142,5,61,0,0,142,36,1,0,0,
        0,143,144,5,60,0,0,144,145,5,62,0,0,145,38,1,0,0,0,146,147,5,65,
        0,0,147,148,5,110,0,0,148,149,5,100,0,0,149,40,1,0,0,0,150,151,5,
        79,0,0,151,152,5,114,0,0,152,42,1,0,0,0,153,154,5,73,0,0,154,155,
        5,102,0,0,155,44,1,0,0,0,156,157,5,84,0,0,157,158,5,104,0,0,158,
        159,5,101,0,0,159,160,5,110,0,0,160,46,1,0,0,0,161,162,5,69,0,0,
        162,163,5,108,0,0,163,164,5,115,0,0,164,165,5,101,0,0,165,48,1,0,
        0,0,166,167,5,69,0,0,167,168,5,110,0,0,168,169,5,100,0,0,169,170,
        5,73,0,0,170,171,5,102,0,0,171,50,1,0,0,0,172,173,5,87,0,0,173,174,
        5,104,0,0,174,175,5,105,0,0,175,176,5,108,0,0,176,177,5,101,0,0,
        177,52,1,0,0,0,178,179,5,69,0,0,179,180,5,110,0,0,180,181,5,100,
        0,0,181,182,5,87,0,0,182,183,5,104,0,0,183,184,5,105,0,0,184,185,
        5,108,0,0,185,186,5,101,0,0,186,54,1,0,0,0,187,188,5,70,0,0,188,
        189,5,111,0,0,189,190,5,114,0,0,190,56,1,0,0,0,191,192,5,84,0,0,
        192,193,5,111,0,0,193,58,1,0,0,0,194,195,5,83,0,0,195,196,5,116,
        0,0,196,197,5,101,0,0,197,198,5,112,0,0,198,60,1,0,0,0,199,200,5,
        69,0,0,200,201,5,110,0,0,201,202,5,100,0,0,202,203,5,70,0,0,203,
        204,5,111,0,0,204,205,5,114,0,0,205,62,1,0,0,0,206,207,5,71,0,0,
        207,208,5,111,0,0,208,209,5,116,0,0,209,210,5,111,0,0,210,64,1,0,
        0,0,211,212,5,83,0,0,212,213,5,117,0,0,213,214,5,98,0,0,214,66,1,
        0,0,0,215,216,5,69,0,0,216,217,5,110,0,0,217,218,5,100,0,0,218,219,
        5,83,0,0,219,220,5,117,0,0,220,221,5,98,0,0,221,68,1,0,0,0,222,228,
        3,79,39,0,223,227,3,79,39,0,224,227,3,77,38,0,225,227,5,95,0,0,226,
        223,1,0,0,0,226,224,1,0,0,0,226,225,1,0,0,0,227,230,1,0,0,0,228,
        226,1,0,0,0,228,229,1,0,0,0,229,70,1,0,0,0,230,228,1,0,0,0,231,240,
        5,48,0,0,232,236,7,1,0,0,233,235,3,77,38,0,234,233,1,0,0,0,235,238,
        1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,240,1,0,0,0,238,236,
        1,0,0,0,239,231,1,0,0,0,239,232,1,0,0,0,240,72,1,0,0,0,241,245,7,
        1,0,0,242,244,3,77,38,0,243,242,1,0,0,0,244,247,1,0,0,0,245,243,
        1,0,0,0,245,246,1,0,0,0,246,250,1,0,0,0,247,245,1,0,0,0,248,250,
        5,48,0,0,249,241,1,0,0,0,249,248,1,0,0,0,249,250,1,0,0,0,250,252,
        1,0,0,0,251,253,5,46,0,0,252,251,1,0,0,0,252,253,1,0,0,0,253,255,
        1,0,0,0,254,256,3,77,38,0,255,254,1,0,0,0,256,257,1,0,0,0,257,255,
        1,0,0,0,257,258,1,0,0,0,258,260,1,0,0,0,259,261,3,75,37,0,260,259,
        1,0,0,0,260,261,1,0,0,0,261,74,1,0,0,0,262,264,7,2,0,0,263,265,7,
        3,0,0,264,263,1,0,0,0,264,265,1,0,0,0,265,267,1,0,0,0,266,268,3,
        77,38,0,267,266,1,0,0,0,268,269,1,0,0,0,269,267,1,0,0,0,269,270,
        1,0,0,0,270,76,1,0,0,0,271,272,7,4,0,0,272,78,1,0,0,0,273,274,7,
        5,0,0,274,80,1,0,0,0,275,277,7,6,0,0,276,275,1,0,0,0,277,278,1,0,
        0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,280,1,0,0,0,280,281,6,40,
        0,0,281,82,1,0,0,0,282,284,5,13,0,0,283,282,1,0,0,0,283,284,1,0,
        0,0,284,285,1,0,0,0,285,286,5,10,0,0,286,84,1,0,0,0,287,291,5,39,
        0,0,288,290,8,7,0,0,289,288,1,0,0,0,290,293,1,0,0,0,291,289,1,0,
        0,0,291,292,1,0,0,0,292,294,1,0,0,0,293,291,1,0,0,0,294,295,6,42,
        0,0,295,86,1,0,0,0,296,297,5,39,0,0,297,298,5,42,0,0,298,302,1,0,
        0,0,299,301,9,0,0,0,300,299,1,0,0,0,301,304,1,0,0,0,302,303,1,0,
        0,0,302,300,1,0,0,0,303,305,1,0,0,0,304,302,1,0,0,0,305,306,5,42,
        0,0,306,307,5,39,0,0,307,308,1,0,0,0,308,309,6,43,0,0,309,88,1,0,
        0,0,18,0,93,107,226,228,236,239,245,249,252,257,260,264,269,278,
        283,291,302,1,6,0,0
    ]

class SmallerBasicLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    STRING = 1
    BOOLEAN = 2
    LROUND = 3
    RROUND = 4
    LSQUARE = 5
    RSQUARE = 6
    DOT = 7
    COLON = 8
    COMMA = 9
    PLUS = 10
    MINUS = 11
    MUL = 12
    DIV = 13
    GT = 14
    LT = 15
    EQ = 16
    GTEQ = 17
    LTEQ = 18
    NEQ = 19
    AND = 20
    OR = 21
    IF = 22
    THEN = 23
    ELSE = 24
    ENDIF = 25
    WHILE = 26
    ENDWHILE = 27
    FOR = 28
    TO = 29
    STEP = 30
    ENDFOR = 31
    GOTO = 32
    SUB = 33
    ENDSUB = 34
    ID = 35
    INT = 36
    FLOAT = 37
    WS = 38
    NEWLINE = 39
    LINE_COMMENT = 40
    COMMENT = 41

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'['", "']'", "'.'", "':'", "','", "'+'", "'-'", 
            "'*'", "'/'", "'>'", "'<'", "'='", "'>='", "'<='", "'<>'", "'And'", 
            "'Or'", "'If'", "'Then'", "'Else'", "'EndIf'", "'While'", "'EndWhile'", 
            "'For'", "'To'", "'Step'", "'EndFor'", "'Goto'", "'Sub'", "'EndSub'" ]

    symbolicNames = [ "<INVALID>",
            "STRING", "BOOLEAN", "LROUND", "RROUND", "LSQUARE", "RSQUARE", 
            "DOT", "COLON", "COMMA", "PLUS", "MINUS", "MUL", "DIV", "GT", 
            "LT", "EQ", "GTEQ", "LTEQ", "NEQ", "AND", "OR", "IF", "THEN", 
            "ELSE", "ENDIF", "WHILE", "ENDWHILE", "FOR", "TO", "STEP", "ENDFOR", 
            "GOTO", "SUB", "ENDSUB", "ID", "INT", "FLOAT", "WS", "NEWLINE", 
            "LINE_COMMENT", "COMMENT" ]

    ruleNames = [ "STRING", "BOOLEAN", "LROUND", "RROUND", "LSQUARE", "RSQUARE", 
                  "DOT", "COLON", "COMMA", "PLUS", "MINUS", "MUL", "DIV", 
                  "GT", "LT", "EQ", "GTEQ", "LTEQ", "NEQ", "AND", "OR", 
                  "IF", "THEN", "ELSE", "ENDIF", "WHILE", "ENDWHILE", "FOR", 
                  "TO", "STEP", "ENDFOR", "GOTO", "SUB", "ENDSUB", "ID", 
                  "INT", "FLOAT", "EXPONENT", "NUM", "CHAR", "WS", "NEWLINE", 
                  "LINE_COMMENT", "COMMENT" ]

    grammarFileName = "SmallerBasic.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


