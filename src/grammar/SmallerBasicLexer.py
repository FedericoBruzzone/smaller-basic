# Generated from src/grammar/SmallerBasic.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,28,252,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,0,3,0,73,8,0,1,1,1,1,5,1,77,8,1,10,1,12,1,
        80,9,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,93,8,2,1,
        3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
        1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
        1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,5,23,167,8,23,10,23,12,23,170,9,23,1,24,1,24,
        5,24,174,8,24,10,24,12,24,177,9,24,1,24,3,24,180,8,24,1,25,1,25,
        5,25,184,8,25,10,25,12,25,187,9,25,1,25,3,25,190,8,25,1,25,1,25,
        4,25,194,8,25,11,25,12,25,195,1,25,3,25,199,8,25,1,26,1,26,1,27,
        1,27,3,27,205,8,27,1,27,4,27,208,8,27,11,27,12,27,209,1,28,1,28,
        1,29,1,29,1,30,4,30,217,8,30,11,30,12,30,218,1,30,1,30,1,31,1,31,
        1,31,1,31,5,31,227,8,31,10,31,12,31,230,9,31,1,31,1,31,1,31,1,31,
        1,31,1,32,3,32,238,8,32,1,32,1,32,1,33,1,33,1,33,1,33,5,33,246,8,
        33,10,33,12,33,249,9,33,1,33,1,33,1,228,0,34,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,0,51,0,53,0,55,0,
        57,0,59,0,61,25,63,26,65,27,67,28,1,0,8,3,0,0,31,34,34,127,127,1,
        0,49,57,2,0,43,43,45,45,2,0,69,69,101,101,1,0,48,57,2,0,65,90,97,
        122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,265,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,1,72,1,0,0,0,3,74,1,0,0,0,5,92,1,0,0,0,7,94,1,0,0,
        0,9,96,1,0,0,0,11,98,1,0,0,0,13,100,1,0,0,0,15,102,1,0,0,0,17,104,
        1,0,0,0,19,106,1,0,0,0,21,108,1,0,0,0,23,110,1,0,0,0,25,112,1,0,
        0,0,27,115,1,0,0,0,29,118,1,0,0,0,31,121,1,0,0,0,33,125,1,0,0,0,
        35,128,1,0,0,0,37,131,1,0,0,0,39,136,1,0,0,0,41,141,1,0,0,0,43,147,
        1,0,0,0,45,153,1,0,0,0,47,162,1,0,0,0,49,171,1,0,0,0,51,189,1,0,
        0,0,53,200,1,0,0,0,55,202,1,0,0,0,57,211,1,0,0,0,59,213,1,0,0,0,
        61,216,1,0,0,0,63,222,1,0,0,0,65,237,1,0,0,0,67,241,1,0,0,0,69,73,
        3,49,24,0,70,73,3,51,25,0,71,73,5,48,0,0,72,69,1,0,0,0,72,70,1,0,
        0,0,72,71,1,0,0,0,73,2,1,0,0,0,74,78,5,34,0,0,75,77,8,0,0,0,76,75,
        1,0,0,0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,81,1,0,0,0,
        80,78,1,0,0,0,81,82,5,34,0,0,82,4,1,0,0,0,83,84,5,116,0,0,84,85,
        5,114,0,0,85,86,5,117,0,0,86,93,5,101,0,0,87,88,5,102,0,0,88,89,
        5,97,0,0,89,90,5,108,0,0,90,91,5,115,0,0,91,93,5,101,0,0,92,83,1,
        0,0,0,92,87,1,0,0,0,93,6,1,0,0,0,94,95,5,40,0,0,95,8,1,0,0,0,96,
        97,5,41,0,0,97,10,1,0,0,0,98,99,5,43,0,0,99,12,1,0,0,0,100,101,5,
        45,0,0,101,14,1,0,0,0,102,103,5,42,0,0,103,16,1,0,0,0,104,105,5,
        47,0,0,105,18,1,0,0,0,106,107,5,62,0,0,107,20,1,0,0,0,108,109,5,
        60,0,0,109,22,1,0,0,0,110,111,5,61,0,0,111,24,1,0,0,0,112,113,5,
        62,0,0,113,114,5,61,0,0,114,26,1,0,0,0,115,116,5,60,0,0,116,117,
        5,61,0,0,117,28,1,0,0,0,118,119,5,60,0,0,119,120,5,62,0,0,120,30,
        1,0,0,0,121,122,5,65,0,0,122,123,5,110,0,0,123,124,5,100,0,0,124,
        32,1,0,0,0,125,126,5,79,0,0,126,127,5,114,0,0,127,34,1,0,0,0,128,
        129,5,73,0,0,129,130,5,102,0,0,130,36,1,0,0,0,131,132,5,84,0,0,132,
        133,5,104,0,0,133,134,5,101,0,0,134,135,5,110,0,0,135,38,1,0,0,0,
        136,137,5,69,0,0,137,138,5,108,0,0,138,139,5,115,0,0,139,140,5,101,
        0,0,140,40,1,0,0,0,141,142,5,69,0,0,142,143,5,110,0,0,143,144,5,
        100,0,0,144,145,5,73,0,0,145,146,5,102,0,0,146,42,1,0,0,0,147,148,
        5,87,0,0,148,149,5,104,0,0,149,150,5,105,0,0,150,151,5,108,0,0,151,
        152,5,101,0,0,152,44,1,0,0,0,153,154,5,69,0,0,154,155,5,110,0,0,
        155,156,5,100,0,0,156,157,5,87,0,0,157,158,5,104,0,0,158,159,5,105,
        0,0,159,160,5,108,0,0,160,161,5,101,0,0,161,46,1,0,0,0,162,168,3,
        59,29,0,163,167,3,59,29,0,164,167,3,57,28,0,165,167,5,95,0,0,166,
        163,1,0,0,0,166,164,1,0,0,0,166,165,1,0,0,0,167,170,1,0,0,0,168,
        166,1,0,0,0,168,169,1,0,0,0,169,48,1,0,0,0,170,168,1,0,0,0,171,175,
        7,1,0,0,172,174,3,57,28,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,
        1,0,0,0,175,176,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,178,180,
        3,55,27,0,179,178,1,0,0,0,179,180,1,0,0,0,180,50,1,0,0,0,181,185,
        7,1,0,0,182,184,3,57,28,0,183,182,1,0,0,0,184,187,1,0,0,0,185,183,
        1,0,0,0,185,186,1,0,0,0,186,190,1,0,0,0,187,185,1,0,0,0,188,190,
        5,48,0,0,189,181,1,0,0,0,189,188,1,0,0,0,189,190,1,0,0,0,190,191,
        1,0,0,0,191,193,5,46,0,0,192,194,3,57,28,0,193,192,1,0,0,0,194,195,
        1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,198,1,0,0,0,197,199,
        3,55,27,0,198,197,1,0,0,0,198,199,1,0,0,0,199,52,1,0,0,0,200,201,
        7,2,0,0,201,54,1,0,0,0,202,204,7,3,0,0,203,205,3,53,26,0,204,203,
        1,0,0,0,204,205,1,0,0,0,205,207,1,0,0,0,206,208,3,57,28,0,207,206,
        1,0,0,0,208,209,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,56,1,
        0,0,0,211,212,7,4,0,0,212,58,1,0,0,0,213,214,7,5,0,0,214,60,1,0,
        0,0,215,217,7,6,0,0,216,215,1,0,0,0,217,218,1,0,0,0,218,216,1,0,
        0,0,218,219,1,0,0,0,219,220,1,0,0,0,220,221,6,30,0,0,221,62,1,0,
        0,0,222,223,5,47,0,0,223,224,5,42,0,0,224,228,1,0,0,0,225,227,9,
        0,0,0,226,225,1,0,0,0,227,230,1,0,0,0,228,229,1,0,0,0,228,226,1,
        0,0,0,229,231,1,0,0,0,230,228,1,0,0,0,231,232,5,42,0,0,232,233,5,
        47,0,0,233,234,1,0,0,0,234,235,6,31,0,0,235,64,1,0,0,0,236,238,5,
        13,0,0,237,236,1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,240,5,
        10,0,0,240,66,1,0,0,0,241,242,5,47,0,0,242,243,5,47,0,0,243,247,
        1,0,0,0,244,246,8,7,0,0,245,244,1,0,0,0,246,249,1,0,0,0,247,245,
        1,0,0,0,247,248,1,0,0,0,248,250,1,0,0,0,249,247,1,0,0,0,250,251,
        6,33,0,0,251,68,1,0,0,0,18,0,72,78,92,166,168,175,179,185,189,195,
        198,204,209,218,228,237,247,1,6,0,0
    ]

class SmallerBasicLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUMBER_LITERAL = 1
    STRING_LITERAL = 2
    BOOLEAN_LITERAL = 3
    LPAREN = 4
    RPAREN = 5
    PLUS = 6
    MINUS = 7
    MUL = 8
    DIV = 9
    GT = 10
    LT = 11
    EQ = 12
    GTEQ = 13
    LTEQ = 14
    NEQ = 15
    AND = 16
    OR = 17
    IF = 18
    THEN = 19
    ELSE = 20
    ENDIF = 21
    WHILE = 22
    ENDWHILE = 23
    ID = 24
    WS = 25
    COMMENT = 26
    NEWLINE = 27
    LINE_COMMENT = 28

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'", "'='", 
            "'>='", "'<='", "'<>'", "'And'", "'Or'", "'If'", "'Then'", "'Else'", 
            "'EndIf'", "'While'", "'EndWhile'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", "LPAREN", 
            "RPAREN", "PLUS", "MINUS", "MUL", "DIV", "GT", "LT", "EQ", "GTEQ", 
            "LTEQ", "NEQ", "AND", "OR", "IF", "THEN", "ELSE", "ENDIF", "WHILE", 
            "ENDWHILE", "ID", "WS", "COMMENT", "NEWLINE", "LINE_COMMENT" ]

    ruleNames = [ "NUMBER_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", 
                  "LPAREN", "RPAREN", "PLUS", "MINUS", "MUL", "DIV", "GT", 
                  "LT", "EQ", "GTEQ", "LTEQ", "NEQ", "AND", "OR", "IF", 
                  "THEN", "ELSE", "ENDIF", "WHILE", "ENDWHILE", "ID", "INT", 
                  "FLOAT", "SIGN", "EXPONENT", "NUM", "CHAR", "WS", "COMMENT", 
                  "NEWLINE", "LINE_COMMENT" ]

    grammarFileName = "SmallerBasic.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


