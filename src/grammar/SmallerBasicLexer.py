# Generated from src/grammar/SmallerBasic.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,313,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,1,0,1,0,1,0,3,0,
        93,8,0,1,1,1,1,5,1,97,8,1,10,1,12,1,100,9,1,1,1,1,1,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,3,2,113,8,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,
        1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,
        13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,
        18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,
        22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,
        24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,
        29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,
        31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,
        34,1,34,1,34,5,34,230,8,34,10,34,12,34,233,9,34,1,35,1,35,5,35,237,
        8,35,10,35,12,35,240,9,35,1,35,3,35,243,8,35,1,36,1,36,5,36,247,
        8,36,10,36,12,36,250,9,36,1,36,3,36,253,8,36,1,36,1,36,4,36,257,
        8,36,11,36,12,36,258,1,36,3,36,262,8,36,1,37,1,37,3,37,266,8,37,
        1,37,4,37,269,8,37,11,37,12,37,270,1,38,1,38,1,39,1,39,1,40,4,40,
        278,8,40,11,40,12,40,279,1,40,1,40,1,41,1,41,1,41,1,41,5,41,288,
        8,41,10,41,12,41,291,9,41,1,41,1,41,1,41,1,41,1,41,1,42,3,42,299,
        8,42,1,42,1,42,1,43,1,43,1,43,1,43,5,43,307,8,43,10,43,12,43,310,
        9,43,1,43,1,43,1,289,0,44,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,0,73,0,75,0,77,0,79,0,81,36,83,37,
        85,38,87,39,1,0,8,3,0,0,31,34,34,127,127,1,0,49,57,2,0,69,69,101,
        101,2,0,43,43,45,45,1,0,48,57,2,0,65,90,97,122,3,0,9,10,13,13,32,
        32,2,0,10,10,13,13,327,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
        0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
        0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
        0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
        0,0,0,0,69,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,
        0,0,0,1,92,1,0,0,0,3,94,1,0,0,0,5,112,1,0,0,0,7,114,1,0,0,0,9,116,
        1,0,0,0,11,118,1,0,0,0,13,120,1,0,0,0,15,122,1,0,0,0,17,124,1,0,
        0,0,19,126,1,0,0,0,21,128,1,0,0,0,23,130,1,0,0,0,25,132,1,0,0,0,
        27,134,1,0,0,0,29,136,1,0,0,0,31,138,1,0,0,0,33,140,1,0,0,0,35,143,
        1,0,0,0,37,146,1,0,0,0,39,149,1,0,0,0,41,153,1,0,0,0,43,156,1,0,
        0,0,45,159,1,0,0,0,47,164,1,0,0,0,49,169,1,0,0,0,51,175,1,0,0,0,
        53,181,1,0,0,0,55,190,1,0,0,0,57,194,1,0,0,0,59,197,1,0,0,0,61,202,
        1,0,0,0,63,209,1,0,0,0,65,214,1,0,0,0,67,218,1,0,0,0,69,225,1,0,
        0,0,71,234,1,0,0,0,73,252,1,0,0,0,75,263,1,0,0,0,77,272,1,0,0,0,
        79,274,1,0,0,0,81,277,1,0,0,0,83,283,1,0,0,0,85,298,1,0,0,0,87,302,
        1,0,0,0,89,93,3,71,35,0,90,93,3,73,36,0,91,93,5,48,0,0,92,89,1,0,
        0,0,92,90,1,0,0,0,92,91,1,0,0,0,93,2,1,0,0,0,94,98,5,34,0,0,95,97,
        8,0,0,0,96,95,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,
        99,101,1,0,0,0,100,98,1,0,0,0,101,102,5,34,0,0,102,4,1,0,0,0,103,
        104,5,116,0,0,104,105,5,114,0,0,105,106,5,117,0,0,106,113,5,101,
        0,0,107,108,5,102,0,0,108,109,5,97,0,0,109,110,5,108,0,0,110,111,
        5,115,0,0,111,113,5,101,0,0,112,103,1,0,0,0,112,107,1,0,0,0,113,
        6,1,0,0,0,114,115,5,40,0,0,115,8,1,0,0,0,116,117,5,41,0,0,117,10,
        1,0,0,0,118,119,5,91,0,0,119,12,1,0,0,0,120,121,5,93,0,0,121,14,
        1,0,0,0,122,123,5,46,0,0,123,16,1,0,0,0,124,125,5,58,0,0,125,18,
        1,0,0,0,126,127,5,43,0,0,127,20,1,0,0,0,128,129,5,45,0,0,129,22,
        1,0,0,0,130,131,5,42,0,0,131,24,1,0,0,0,132,133,5,47,0,0,133,26,
        1,0,0,0,134,135,5,62,0,0,135,28,1,0,0,0,136,137,5,60,0,0,137,30,
        1,0,0,0,138,139,5,61,0,0,139,32,1,0,0,0,140,141,5,62,0,0,141,142,
        5,61,0,0,142,34,1,0,0,0,143,144,5,60,0,0,144,145,5,61,0,0,145,36,
        1,0,0,0,146,147,5,60,0,0,147,148,5,62,0,0,148,38,1,0,0,0,149,150,
        5,65,0,0,150,151,5,110,0,0,151,152,5,100,0,0,152,40,1,0,0,0,153,
        154,5,79,0,0,154,155,5,114,0,0,155,42,1,0,0,0,156,157,5,73,0,0,157,
        158,5,102,0,0,158,44,1,0,0,0,159,160,5,84,0,0,160,161,5,104,0,0,
        161,162,5,101,0,0,162,163,5,110,0,0,163,46,1,0,0,0,164,165,5,69,
        0,0,165,166,5,108,0,0,166,167,5,115,0,0,167,168,5,101,0,0,168,48,
        1,0,0,0,169,170,5,69,0,0,170,171,5,110,0,0,171,172,5,100,0,0,172,
        173,5,73,0,0,173,174,5,102,0,0,174,50,1,0,0,0,175,176,5,87,0,0,176,
        177,5,104,0,0,177,178,5,105,0,0,178,179,5,108,0,0,179,180,5,101,
        0,0,180,52,1,0,0,0,181,182,5,69,0,0,182,183,5,110,0,0,183,184,5,
        100,0,0,184,185,5,87,0,0,185,186,5,104,0,0,186,187,5,105,0,0,187,
        188,5,108,0,0,188,189,5,101,0,0,189,54,1,0,0,0,190,191,5,70,0,0,
        191,192,5,111,0,0,192,193,5,114,0,0,193,56,1,0,0,0,194,195,5,84,
        0,0,195,196,5,111,0,0,196,58,1,0,0,0,197,198,5,83,0,0,198,199,5,
        116,0,0,199,200,5,101,0,0,200,201,5,112,0,0,201,60,1,0,0,0,202,203,
        5,69,0,0,203,204,5,110,0,0,204,205,5,100,0,0,205,206,5,70,0,0,206,
        207,5,111,0,0,207,208,5,114,0,0,208,62,1,0,0,0,209,210,5,71,0,0,
        210,211,5,111,0,0,211,212,5,116,0,0,212,213,5,111,0,0,213,64,1,0,
        0,0,214,215,5,83,0,0,215,216,5,117,0,0,216,217,5,98,0,0,217,66,1,
        0,0,0,218,219,5,69,0,0,219,220,5,110,0,0,220,221,5,100,0,0,221,222,
        5,83,0,0,222,223,5,117,0,0,223,224,5,98,0,0,224,68,1,0,0,0,225,231,
        3,79,39,0,226,230,3,79,39,0,227,230,3,77,38,0,228,230,5,95,0,0,229,
        226,1,0,0,0,229,227,1,0,0,0,229,228,1,0,0,0,230,233,1,0,0,0,231,
        229,1,0,0,0,231,232,1,0,0,0,232,70,1,0,0,0,233,231,1,0,0,0,234,238,
        7,1,0,0,235,237,3,77,38,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,
        1,0,0,0,238,239,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,241,243,
        3,75,37,0,242,241,1,0,0,0,242,243,1,0,0,0,243,72,1,0,0,0,244,248,
        7,1,0,0,245,247,3,77,38,0,246,245,1,0,0,0,247,250,1,0,0,0,248,246,
        1,0,0,0,248,249,1,0,0,0,249,253,1,0,0,0,250,248,1,0,0,0,251,253,
        5,48,0,0,252,244,1,0,0,0,252,251,1,0,0,0,252,253,1,0,0,0,253,254,
        1,0,0,0,254,256,5,46,0,0,255,257,3,77,38,0,256,255,1,0,0,0,257,258,
        1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,261,1,0,0,0,260,262,
        3,75,37,0,261,260,1,0,0,0,261,262,1,0,0,0,262,74,1,0,0,0,263,265,
        7,2,0,0,264,266,7,3,0,0,265,264,1,0,0,0,265,266,1,0,0,0,266,268,
        1,0,0,0,267,269,3,77,38,0,268,267,1,0,0,0,269,270,1,0,0,0,270,268,
        1,0,0,0,270,271,1,0,0,0,271,76,1,0,0,0,272,273,7,4,0,0,273,78,1,
        0,0,0,274,275,7,5,0,0,275,80,1,0,0,0,276,278,7,6,0,0,277,276,1,0,
        0,0,278,279,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,281,1,0,
        0,0,281,282,6,40,0,0,282,82,1,0,0,0,283,284,5,47,0,0,284,285,5,42,
        0,0,285,289,1,0,0,0,286,288,9,0,0,0,287,286,1,0,0,0,288,291,1,0,
        0,0,289,290,1,0,0,0,289,287,1,0,0,0,290,292,1,0,0,0,291,289,1,0,
        0,0,292,293,5,42,0,0,293,294,5,47,0,0,294,295,1,0,0,0,295,296,6,
        41,0,0,296,84,1,0,0,0,297,299,5,13,0,0,298,297,1,0,0,0,298,299,1,
        0,0,0,299,300,1,0,0,0,300,301,5,10,0,0,301,86,1,0,0,0,302,303,5,
        47,0,0,303,304,5,47,0,0,304,308,1,0,0,0,305,307,8,7,0,0,306,305,
        1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,311,
        1,0,0,0,310,308,1,0,0,0,311,312,6,43,0,0,312,88,1,0,0,0,18,0,92,
        98,112,229,231,238,242,248,252,258,261,265,270,279,289,298,308,1,
        6,0,0
    ]

class SmallerBasicLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUMBER_LITERAL = 1
    STRING_LITERAL = 2
    BOOLEAN_LITERAL = 3
    LROUND = 4
    RROUND = 5
    LSQUARE = 6
    RSQUARE = 7
    DOT = 8
    COLON = 9
    PLUS = 10
    MINUS = 11
    MUL = 12
    DIV = 13
    GT = 14
    LT = 15
    EQ = 16
    GTEQ = 17
    LTEQ = 18
    NEQ = 19
    AND = 20
    OR = 21
    IF = 22
    THEN = 23
    ELSE = 24
    ENDIF = 25
    WHILE = 26
    ENDWHILE = 27
    FOR = 28
    TO = 29
    STEP = 30
    ENDFOR = 31
    GOTO = 32
    SUB = 33
    ENDSUB = 34
    ID = 35
    WS = 36
    COMMENT = 37
    NEWLINE = 38
    LINE_COMMENT = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'['", "']'", "'.'", "':'", "'+'", "'-'", "'*'", 
            "'/'", "'>'", "'<'", "'='", "'>='", "'<='", "'<>'", "'And'", 
            "'Or'", "'If'", "'Then'", "'Else'", "'EndIf'", "'While'", "'EndWhile'", 
            "'For'", "'To'", "'Step'", "'EndFor'", "'Goto'", "'Sub'", "'EndSub'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", "LROUND", 
            "RROUND", "LSQUARE", "RSQUARE", "DOT", "COLON", "PLUS", "MINUS", 
            "MUL", "DIV", "GT", "LT", "EQ", "GTEQ", "LTEQ", "NEQ", "AND", 
            "OR", "IF", "THEN", "ELSE", "ENDIF", "WHILE", "ENDWHILE", "FOR", 
            "TO", "STEP", "ENDFOR", "GOTO", "SUB", "ENDSUB", "ID", "WS", 
            "COMMENT", "NEWLINE", "LINE_COMMENT" ]

    ruleNames = [ "NUMBER_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", 
                  "LROUND", "RROUND", "LSQUARE", "RSQUARE", "DOT", "COLON", 
                  "PLUS", "MINUS", "MUL", "DIV", "GT", "LT", "EQ", "GTEQ", 
                  "LTEQ", "NEQ", "AND", "OR", "IF", "THEN", "ELSE", "ENDIF", 
                  "WHILE", "ENDWHILE", "FOR", "TO", "STEP", "ENDFOR", "GOTO", 
                  "SUB", "ENDSUB", "ID", "INT", "FLOAT", "EXPONENT", "NUM", 
                  "CHAR", "WS", "COMMENT", "NEWLINE", "LINE_COMMENT" ]

    grammarFileName = "SmallerBasic.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


