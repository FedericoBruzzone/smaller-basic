# Generated from src/grammar/SmallerBasic.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,206,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,1,0,1,0,1,0,3,0,61,8,0,1,1,1,1,5,1,65,8,1,10,1,
        12,1,68,9,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,81,8,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
        10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,
        15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,5,17,121,8,17,10,
        17,12,17,124,9,17,1,18,1,18,5,18,128,8,18,10,18,12,18,131,9,18,1,
        18,3,18,134,8,18,1,19,1,19,5,19,138,8,19,10,19,12,19,141,9,19,1,
        19,3,19,144,8,19,1,19,1,19,4,19,148,8,19,11,19,12,19,149,1,19,3,
        19,153,8,19,1,20,1,20,1,21,1,21,3,21,159,8,21,1,21,4,21,162,8,21,
        11,21,12,21,163,1,22,1,22,1,23,1,23,1,24,4,24,171,8,24,11,24,12,
        24,172,1,24,1,24,1,25,1,25,1,25,1,25,5,25,181,8,25,10,25,12,25,184,
        9,25,1,25,1,25,1,25,1,25,1,25,1,26,3,26,192,8,26,1,26,1,26,1,27,
        1,27,1,27,1,27,5,27,200,8,27,10,27,12,27,203,9,27,1,27,1,27,1,182,
        0,28,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,0,39,0,41,0,43,0,45,0,47,0,49,
        19,51,20,53,21,55,22,1,0,8,3,0,0,31,34,34,127,127,1,0,49,57,2,0,
        43,43,45,45,2,0,69,69,101,101,1,0,48,57,2,0,65,90,97,122,3,0,9,10,
        13,13,32,32,2,0,10,10,13,13,219,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,60,1,0,0,
        0,3,62,1,0,0,0,5,80,1,0,0,0,7,82,1,0,0,0,9,84,1,0,0,0,11,86,1,0,
        0,0,13,88,1,0,0,0,15,90,1,0,0,0,17,92,1,0,0,0,19,94,1,0,0,0,21,96,
        1,0,0,0,23,98,1,0,0,0,25,100,1,0,0,0,27,103,1,0,0,0,29,106,1,0,0,
        0,31,109,1,0,0,0,33,113,1,0,0,0,35,116,1,0,0,0,37,125,1,0,0,0,39,
        143,1,0,0,0,41,154,1,0,0,0,43,156,1,0,0,0,45,165,1,0,0,0,47,167,
        1,0,0,0,49,170,1,0,0,0,51,176,1,0,0,0,53,191,1,0,0,0,55,195,1,0,
        0,0,57,61,3,37,18,0,58,61,3,39,19,0,59,61,5,48,0,0,60,57,1,0,0,0,
        60,58,1,0,0,0,60,59,1,0,0,0,61,2,1,0,0,0,62,66,5,34,0,0,63,65,8,
        0,0,0,64,63,1,0,0,0,65,68,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,
        69,1,0,0,0,68,66,1,0,0,0,69,70,5,34,0,0,70,4,1,0,0,0,71,72,5,116,
        0,0,72,73,5,114,0,0,73,74,5,117,0,0,74,81,5,101,0,0,75,76,5,102,
        0,0,76,77,5,97,0,0,77,78,5,108,0,0,78,79,5,115,0,0,79,81,5,101,0,
        0,80,71,1,0,0,0,80,75,1,0,0,0,81,6,1,0,0,0,82,83,5,40,0,0,83,8,1,
        0,0,0,84,85,5,41,0,0,85,10,1,0,0,0,86,87,5,43,0,0,87,12,1,0,0,0,
        88,89,5,45,0,0,89,14,1,0,0,0,90,91,5,42,0,0,91,16,1,0,0,0,92,93,
        5,47,0,0,93,18,1,0,0,0,94,95,5,62,0,0,95,20,1,0,0,0,96,97,5,60,0,
        0,97,22,1,0,0,0,98,99,5,61,0,0,99,24,1,0,0,0,100,101,5,62,0,0,101,
        102,5,61,0,0,102,26,1,0,0,0,103,104,5,60,0,0,104,105,5,61,0,0,105,
        28,1,0,0,0,106,107,5,60,0,0,107,108,5,62,0,0,108,30,1,0,0,0,109,
        110,5,65,0,0,110,111,5,110,0,0,111,112,5,100,0,0,112,32,1,0,0,0,
        113,114,5,79,0,0,114,115,5,114,0,0,115,34,1,0,0,0,116,122,3,47,23,
        0,117,121,3,47,23,0,118,121,3,45,22,0,119,121,5,95,0,0,120,117,1,
        0,0,0,120,118,1,0,0,0,120,119,1,0,0,0,121,124,1,0,0,0,122,120,1,
        0,0,0,122,123,1,0,0,0,123,36,1,0,0,0,124,122,1,0,0,0,125,129,7,1,
        0,0,126,128,3,45,22,0,127,126,1,0,0,0,128,131,1,0,0,0,129,127,1,
        0,0,0,129,130,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,132,134,3,
        43,21,0,133,132,1,0,0,0,133,134,1,0,0,0,134,38,1,0,0,0,135,139,7,
        1,0,0,136,138,3,45,22,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,
        1,0,0,0,139,140,1,0,0,0,140,144,1,0,0,0,141,139,1,0,0,0,142,144,
        5,48,0,0,143,135,1,0,0,0,143,142,1,0,0,0,143,144,1,0,0,0,144,145,
        1,0,0,0,145,147,5,46,0,0,146,148,3,45,22,0,147,146,1,0,0,0,148,149,
        1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,153,
        3,43,21,0,152,151,1,0,0,0,152,153,1,0,0,0,153,40,1,0,0,0,154,155,
        7,2,0,0,155,42,1,0,0,0,156,158,7,3,0,0,157,159,3,41,20,0,158,157,
        1,0,0,0,158,159,1,0,0,0,159,161,1,0,0,0,160,162,3,45,22,0,161,160,
        1,0,0,0,162,163,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,44,1,
        0,0,0,165,166,7,4,0,0,166,46,1,0,0,0,167,168,7,5,0,0,168,48,1,0,
        0,0,169,171,7,6,0,0,170,169,1,0,0,0,171,172,1,0,0,0,172,170,1,0,
        0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,175,6,24,0,0,175,50,1,0,
        0,0,176,177,5,47,0,0,177,178,5,42,0,0,178,182,1,0,0,0,179,181,9,
        0,0,0,180,179,1,0,0,0,181,184,1,0,0,0,182,183,1,0,0,0,182,180,1,
        0,0,0,183,185,1,0,0,0,184,182,1,0,0,0,185,186,5,42,0,0,186,187,5,
        47,0,0,187,188,1,0,0,0,188,189,6,25,0,0,189,52,1,0,0,0,190,192,5,
        13,0,0,191,190,1,0,0,0,191,192,1,0,0,0,192,193,1,0,0,0,193,194,5,
        10,0,0,194,54,1,0,0,0,195,196,5,47,0,0,196,197,5,47,0,0,197,201,
        1,0,0,0,198,200,8,7,0,0,199,198,1,0,0,0,200,203,1,0,0,0,201,199,
        1,0,0,0,201,202,1,0,0,0,202,204,1,0,0,0,203,201,1,0,0,0,204,205,
        6,27,0,0,205,56,1,0,0,0,18,0,60,66,80,120,122,129,133,139,143,149,
        152,158,163,172,182,191,201,1,6,0,0
    ]

class SmallerBasicLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUMBER_LITERAL = 1
    STRING_LITERAL = 2
    BOOLEAN_LITERAL = 3
    LPAREN = 4
    RPAREN = 5
    PLUS = 6
    MINUS = 7
    MUL = 8
    DIV = 9
    GT = 10
    LT = 11
    EQ = 12
    GTEQ = 13
    LTEQ = 14
    NEQ = 15
    AND = 16
    OR = 17
    ID = 18
    WS = 19
    COMMENT = 20
    NEWLINE = 21
    LINE_COMMENT = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'", "'='", 
            "'>='", "'<='", "'<>'", "'And'", "'Or'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", "LPAREN", 
            "RPAREN", "PLUS", "MINUS", "MUL", "DIV", "GT", "LT", "EQ", "GTEQ", 
            "LTEQ", "NEQ", "AND", "OR", "ID", "WS", "COMMENT", "NEWLINE", 
            "LINE_COMMENT" ]

    ruleNames = [ "NUMBER_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", 
                  "LPAREN", "RPAREN", "PLUS", "MINUS", "MUL", "DIV", "GT", 
                  "LT", "EQ", "GTEQ", "LTEQ", "NEQ", "AND", "OR", "ID", 
                  "INT", "FLOAT", "SIGN", "EXPONENT", "NUM", "CHAR", "WS", 
                  "COMMENT", "NEWLINE", "LINE_COMMENT" ]

    grammarFileName = "SmallerBasic.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


